<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security 
	http://www.springframework.org/schema/security/spring-security.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<bean id="customAccessDenied" class="com.lec.mgb.security.CustomAccessDeniedHandler"/>
	<bean id="customLoginSuccess" class="com.lec.mgb.security.CustomLoginSuccessHandler"/>

	
	<!-- security 요소들  -->
	<security:http>
		<!-- 특정 url pattern 요청이 들어올때 인터셉터를 이용한 접근 제한 설정 -->
		<security:intercept-url pattern="/user/account/**" access="permitAll"/>
		 <security:intercept-url pattern="/user/inn/**" access="permitAll"/>
		<security:intercept-url pattern="/user/activ/**" access="permitAll"/>
		<security:intercept-url pattern="/user/templ/**" access="permitAll"/>
		<security:intercept-url pattern="/user/planner/**" access="permitAll"/>
		
		<!-- /sample/member URL요청은 ROLE_MEMBER 라는 권한이 있는 사용자만 접근 가능 -->
		<security:intercept-url pattern="/user/mypage/mypageInfo" access="hasRole('ROLE_MEMBER')"/>
		
		<!-- /sample/admin URL요청은 ROLE_ADMIN 라는 권한이 있는 사용자만 접근 가능 -->
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
		
		<security:form-login login-page="/user/account/login"
			authentication-success-handler-ref="customLoginSuccess"/>
	
		<!-- <security:access-denied-handler error-page="/accessError"/>  -->
		<security:access-denied-handler error-page="/user/account/loginFail"/>
		
		<security:logout logout-url="/user/account/logoutOk" 
			invalidate-session="false" delete-cookies="JSESSIONID"/>
	</security:http>
	
	<!-- passwordEncoding -->
	<bean id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	
	<!--  AuthenticationManger 빈 생성 -->
	<security:authentication-manager>
		
		<!-- UserDerailsService 를 사용한 인증과 권한 처리 -->
		<security:authentication-provider>
			<!-- 	<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN, ROLE_MEMBER"/>
				 -->
			<!-- JDBC 사용 -->
			<security:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query=
					"SELECT member_id username, member_pwEncode password, enabled FROM MEMBER WHERE member_id = ?"
				authorities-by-username-query=
					"SELECT member_id username, auth FROM MEMBER WHERE member_id = ?" />
		
			
			<security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
	
	</security:authentication-manager>
	

</beans>
